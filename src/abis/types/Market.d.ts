/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "getApproved(address,uint256)": FunctionFragment;
    "ceoAddress()": FunctionFragment;
    "calFee(address,uint256)": FunctionFragment;
    "ownerOf(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "revenue()": FunctionFragment;
    "removePrice(address,uint256)": FunctionFragment;
    "setLimitFee(address,uint256,uint256)": FunctionFragment;
    "setLimitFeeAll(address[],uint256[],uint256[])": FunctionFragment;
    "sell(address,uint256,uint256)": FunctionFragment;
    "getArrGames()": FunctionFragment;
    "Percen()": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "arrGames(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "calPrice(address,uint256,uint256)": FunctionFragment;
    "changeCeo(address)": FunctionFragment;
    "getTokenPrice(address,uint256)": FunctionFragment;
    "buy(address,uint256)": FunctionFragment;
    "cancelBussiness()": FunctionFragment;
    "Games(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getApproved",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ceoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "revenue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitFeeAll",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrGames",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Percen", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "arrGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeCeo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBussiness",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Games", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ceoAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitFeeAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArrGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Percen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arrGames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeCeo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBussiness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Sell(address,address,uint256,uint256)": EventFragment;
    "Buy(address,address,uint256,uint256)": EventFragment;
    "_resetPrice(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "_resetPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type SellEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    _user: string;
    _game: string;
    _tokenId: BigNumber;
    _Price: BigNumber;
  }
>;

export type BuyEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    _user: string;
    _game: string;
    _tokenId: BigNumber;
    _Price: BigNumber;
  }
>;

export type _resetPriceEvent = TypedEvent<
  [string, BigNumber] & { _game: string; _tokenId: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    getApproved(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ceoAddress(overrides?: CallOverrides): Promise<[string]>;

    calFee(
      _game: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    ownerOf(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    removePrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitFee(
      _game: string,
      _Fee: BigNumberish,
      _limitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitFeeAll(
      _game: string[],
      _Fee: BigNumberish[],
      _limitFee: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sell(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getArrGames(overrides?: CallOverrides): Promise<[string[]]>;

    Percen(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    arrGames(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    calPrice(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _Need: BigNumber }>;

    changeCeo(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenPrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber] & {
          tokenOwner: string;
          Price: BigNumber;
          fee: BigNumber;
        }
      ]
    >;

    buy(
      _game: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBussiness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Games(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { Fee: BigNumber; limitFee: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getApproved(
    _game: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ceoAddress(overrides?: CallOverrides): Promise<string>;

  calFee(
    _game: string,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOf(
    _game: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revenue(overrides?: CallOverrides): Promise<BigNumber>;

  removePrice(
    _game: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitFee(
    _game: string,
    _Fee: BigNumberish,
    _limitFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitFeeAll(
    _game: string[],
    _Fee: BigNumberish[],
    _limitFee: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sell(
    _game: string,
    _tokenId: BigNumberish,
    _Price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getArrGames(overrides?: CallOverrides): Promise<string[]>;

  Percen(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  arrGames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  calPrice(
    _game: string,
    _tokenId: BigNumberish,
    _Price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeCeo(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenPrice(
    _game: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      tokenOwner: string;
      Price: BigNumber;
      fee: BigNumber;
    }
  >;

  buy(
    _game: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBussiness(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Games(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { Fee: BigNumber; limitFee: BigNumber }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getApproved(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ceoAddress(overrides?: CallOverrides): Promise<string>;

    calFee(
      _game: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    removePrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitFee(
      _game: string,
      _Fee: BigNumberish,
      _limitFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitFeeAll(
      _game: string[],
      _Fee: BigNumberish[],
      _limitFee: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sell(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getArrGames(overrides?: CallOverrides): Promise<string[]>;

    Percen(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    arrGames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    calPrice(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeCeo(_address: string, overrides?: CallOverrides): Promise<void>;

    getTokenPrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        tokenOwner: string;
        Price: BigNumber;
        fee: BigNumber;
      }
    >;

    buy(
      _game: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBussiness(overrides?: CallOverrides): Promise<void>;

    Games(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { Fee: BigNumber; limitFee: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Sell(address,address,uint256,uint256)"(
      _user?: null,
      _game?: null,
      _tokenId?: null,
      _Price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _game: string; _tokenId: BigNumber; _Price: BigNumber }
    >;

    Sell(
      _user?: null,
      _game?: null,
      _tokenId?: null,
      _Price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _game: string; _tokenId: BigNumber; _Price: BigNumber }
    >;

    "Buy(address,address,uint256,uint256)"(
      _user?: null,
      _game?: null,
      _tokenId?: null,
      _Price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _game: string; _tokenId: BigNumber; _Price: BigNumber }
    >;

    Buy(
      _user?: null,
      _game?: null,
      _tokenId?: null,
      _Price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _user: string; _game: string; _tokenId: BigNumber; _Price: BigNumber }
    >;

    "_resetPrice(address,uint256)"(
      _game?: null,
      _tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _game: string; _tokenId: BigNumber }
    >;

    _resetPrice(
      _game?: null,
      _tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _game: string; _tokenId: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    getApproved(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ceoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calFee(
      _game: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    removePrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitFee(
      _game: string,
      _Fee: BigNumberish,
      _limitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitFeeAll(
      _game: string[],
      _Fee: BigNumberish[],
      _limitFee: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sell(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getArrGames(overrides?: CallOverrides): Promise<BigNumber>;

    Percen(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    arrGames(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    calPrice(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeCeo(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenPrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      _game: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBussiness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Games(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getApproved(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ceoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calFee(
      _game: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitFee(
      _game: string,
      _Fee: BigNumberish,
      _limitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitFeeAll(
      _game: string[],
      _Fee: BigNumberish[],
      _limitFee: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sell(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getArrGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Percen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arrGames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calPrice(
      _game: string,
      _tokenId: BigNumberish,
      _Price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeCeo(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      _game: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _game: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBussiness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Games(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
